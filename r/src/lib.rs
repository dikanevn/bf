use solana_program::{
    account_info::{next_account_info, AccountInfo},
    entrypoint,
    entrypoint::ProgramResult,
    msg,
    program::invoke_signed,
    program_error::ProgramError,
    pubkey::Pubkey,
};

pub mod instructions;

// Массив всех корней Merkle дерева для каждого раунда
// Новые корни включают в себя не только адрес, но и NFTnumber (uint16)
pub const ALL_MERKLE_ROOTS: [[u8; 32]; 21] = [
    [0x12, 0x47, 0x25, 0x2f, 0xc1, 0x32, 0xf4, 0xee, 0x78, 0xf2, 0xf4, 0x66, 0x20, 0x19, 0x4c, 0x11, 0xce, 0xaf, 0x56, 0xef, 0x66, 0xd5, 0xf8, 0xbe, 0x93, 0xdb, 0xea, 0xfe, 0x21, 0xbb, 0x81, 0x7c],
    [0xf9, 0x4b, 0x0d, 0x55, 0x0f, 0xf9, 0xa8, 0x97, 0x1d, 0x7d, 0xd3, 0x93, 0x07, 0x1c, 0x10, 0xdf, 0x8c, 0xac, 0x0c, 0x82, 0x69, 0xa5, 0x34, 0x1e, 0x44, 0x48, 0x82, 0x5f, 0x4b, 0x6c, 0x1d, 0x22],
    [0x6c, 0xc7, 0xe6, 0xe7, 0xaa, 0x24, 0xa3, 0x09, 0x02, 0xee, 0x5e, 0xb0, 0x87, 0x6e, 0x87, 0x5e, 0x9c, 0x84, 0x2a, 0x46, 0xc1, 0xe4, 0xba, 0xe5, 0xbf, 0xc2, 0xb1, 0x4b, 0x25, 0xf0, 0xb5, 0xb7],
    [0x66, 0x8e, 0x12, 0xce, 0xd1, 0x53, 0x61, 0x12, 0x25, 0xd1, 0x5b, 0x49, 0x7f, 0x3f, 0x31, 0x45, 0xae, 0xf0, 0xa2, 0x87, 0x68, 0x7e, 0x52, 0x68, 0x44, 0x82, 0x24, 0xf3, 0x28, 0xa3, 0x50, 0xb8],
    [0xa9, 0x7e, 0x10, 0x9b, 0x59, 0xe6, 0x8e, 0x01, 0x26, 0x36, 0xa3, 0xc6, 0x99, 0x7b, 0xad, 0xbc, 0x89, 0x41, 0x74, 0xe1, 0x2b, 0x8f, 0xd0, 0xf5, 0xb4, 0xab, 0x5c, 0xf1, 0x32, 0x3c, 0x40, 0xe2],
    [0xc0, 0xc2, 0x2a, 0x3b, 0x24, 0x38, 0xda, 0xa8, 0x0f, 0x45, 0xed, 0xfc, 0x7e, 0x47, 0xe0, 0x75, 0xb0, 0x25, 0x64, 0xfa, 0xd1, 0xf4, 0xb4, 0x34, 0xe9, 0x10, 0x1b, 0x0b, 0x42, 0x71, 0x00, 0x5c],
    [0x3b, 0x22, 0x6f, 0x00, 0xd1, 0xfe, 0xa6, 0x78, 0x10, 0xcf, 0xa3, 0x50, 0x2d, 0xf0, 0xde, 0x70, 0x05, 0x8b, 0xca, 0xf8, 0x1f, 0x9e, 0xdf, 0x53, 0x12, 0xcc, 0x96, 0x9e, 0xd0, 0xd7, 0x30, 0xdd],
    [0xf5, 0xeb, 0xf6, 0x2b, 0xcc, 0x9e, 0x2e, 0xb6, 0x7a, 0xbf, 0x69, 0xd8, 0x60, 0xc1, 0x9a, 0xe0, 0x10, 0x54, 0xca, 0x94, 0x45, 0xcb, 0x60, 0xd1, 0x91, 0xd3, 0xd5, 0xf4, 0x19, 0x18, 0xcb, 0x7c],
    [0xbd, 0xe1, 0xc7, 0xce, 0xcd, 0x51, 0x7a, 0x41, 0xe2, 0x52, 0x38, 0xab, 0x7a, 0xc8, 0x00, 0x29, 0xe5, 0xf3, 0xed, 0x9d, 0xf0, 0x65, 0x8d, 0x0d, 0x0d, 0x06, 0x24, 0x5f, 0x10, 0x56, 0xba, 0x30],
    [0x54, 0x90, 0xeb, 0xcd, 0x0a, 0xb4, 0x2f, 0xe6, 0x0b, 0xd4, 0x7d, 0xdf, 0x9e, 0x01, 0xd2, 0x19, 0x68, 0x06, 0xdc, 0xf8, 0xf4, 0x49, 0x78, 0x3e, 0x90, 0x87, 0xc4, 0x75, 0x60, 0x5a, 0xba, 0xed],
    [0x92, 0xf3, 0x10, 0xf2, 0x47, 0x0e, 0x39, 0x69, 0x74, 0xac, 0xfb, 0xc6, 0x0e, 0x77, 0x88, 0xc0, 0xf3, 0x71, 0x43, 0x06, 0x5e, 0x71, 0x14, 0xd0, 0x7c, 0x36, 0xef, 0x98, 0xe6, 0x08, 0xd3, 0x5d],
    [0x11, 0xd6, 0x39, 0xcf, 0x76, 0x35, 0x57, 0x1b, 0x7d, 0x44, 0xb4, 0xdc, 0xa9, 0xed, 0xec, 0xa9, 0x91, 0x85, 0x08, 0xfe, 0x46, 0x04, 0x0e, 0x7e, 0x2d, 0x14, 0x06, 0x20, 0x5e, 0x32, 0x4a, 0xb8],
    [0x93, 0x31, 0x4d, 0x89, 0xe8, 0xb7, 0x1f, 0x03, 0xa3, 0x41, 0x3b, 0x6b, 0x93, 0x8a, 0xd5, 0x83, 0xbf, 0x2f, 0xde, 0xfd, 0x73, 0x28, 0x66, 0x47, 0xfa, 0x0b, 0xb3, 0xb7, 0xd8, 0xc5, 0x78, 0x4c],
    [0xb1, 0xa8, 0xa0, 0x93, 0x8c, 0xe2, 0x92, 0x29, 0xbf, 0xbe, 0x23, 0x58, 0x04, 0x63, 0xdf, 0x85, 0xec, 0xea, 0x52, 0xe8, 0x3f, 0x96, 0x9d, 0xe5, 0xf4, 0x7c, 0x4b, 0x32, 0xe3, 0xc2, 0x03, 0x02],
    [0x0b, 0x34, 0x1d, 0x97, 0x6d, 0x55, 0x79, 0x3c, 0x22, 0xb7, 0x09, 0xe6, 0x74, 0xae, 0xd9, 0xec, 0xc8, 0x0b, 0xfc, 0x50, 0xfc, 0x9b, 0xc0, 0x7d, 0xc6, 0x07, 0x4e, 0x9b, 0x4d, 0x8b, 0xa6, 0xa5],
    [0x6d, 0xc3, 0x75, 0x75, 0x97, 0x92, 0x9e, 0xdc, 0x89, 0xd4, 0xd7, 0xea, 0x37, 0x28, 0x83, 0x61, 0x89, 0x43, 0x3c, 0x88, 0x54, 0x6c, 0x2a, 0x45, 0x80, 0xef, 0x73, 0x9e, 0x11, 0x29, 0xa3, 0xdb],
    [0x63, 0x49, 0x18, 0x8c, 0x8f, 0x2d, 0x99, 0x69, 0x8b, 0xfe, 0x0c, 0x24, 0xaa, 0xd1, 0x91, 0x69, 0x04, 0x48, 0x05, 0xe3, 0x07, 0xe4, 0xc3, 0x32, 0x03, 0x94, 0x7b, 0xb3, 0x17, 0xce, 0xfc, 0x01],
    [0x76, 0xd1, 0x78, 0x1e, 0x78, 0xe5, 0xc6, 0xa3, 0x76, 0x79, 0x93, 0xa9, 0x3c, 0x57, 0xce, 0x2a, 0x0f, 0x40, 0xf3, 0x49, 0x52, 0x3f, 0x07, 0x65, 0x6a, 0x87, 0xb2, 0x58, 0x96, 0x24, 0x90, 0xe5],
    [0x50, 0x70, 0xb0, 0xe2, 0xc8, 0x57, 0x93, 0x7a, 0x36, 0xd5, 0x3f, 0x61, 0x2d, 0x8a, 0x32, 0xae, 0xa8, 0xb0, 0x85, 0xa9, 0xa7, 0x33, 0x52, 0x87, 0xd3, 0x08, 0x28, 0x91, 0x98, 0xca, 0x7d, 0x9c],
    [0xea, 0x0a, 0x31, 0xc9, 0x1f, 0x74, 0x49, 0x96, 0x21, 0xd0, 0x2f, 0xcb, 0x26, 0x48, 0xe1, 0xf4, 0x9e, 0x6a, 0x4b, 0x25, 0x14, 0xcd, 0x1d, 0xa7, 0x70, 0xc4, 0x7e, 0x28, 0xba, 0xee, 0x5b, 0x7a],
    [0x07, 0xcf, 0xd2, 0x20, 0x51, 0x89, 0xe6, 0x45, 0x2c, 0x6a, 0xd8, 0x6e, 0x4c, 0x58, 0x67, 0x47, 0x4e, 0xb1, 0xe4, 0xe2, 0x5d, 0x47, 0xed, 0x83, 0x04, 0xf1, 0x82, 0x49, 0xcc, 0xfb, 0xd1, 0xe0]
];

entrypoint!(process_instruction);

pub fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    instruction_data: &[u8],
) -> ProgramResult {
    if instruction_data.is_empty() {
        msg!("Instruction data is empty");
        return Err(ProgramError::InvalidInstructionData);
    }

    msg!("Instruction data length: {}", instruction_data.len());
    let instruction_number = instruction_data[0];
    msg!("Instruction number: {}", instruction_number);

    match instruction_number {
        14 => {
            msg!("Instruction: Manual mint record creation");
            instructions::instruction_14::process_instruction(program_id, accounts, &instruction_data[1..])
        }
        15 => {
            msg!("Instruction: Delete mint record for specific round");
            instructions::instruction_15::process_instruction(program_id, accounts, &instruction_data[1..])
        }
       
        /*
        17 => {
            msg!("Instruction: Create mint, token with Merkle proof verification, extended tracking, and metadata");
            instructions::instruction_17::process_instruction(program_id, accounts, &instruction_data[1..])
        } 
        31 => {
            msg!("Instruction: Create and Mint pNFT");
            instructions::instruction_31::process_create_and_mint_pnft(program_id, accounts)
        }
        32 => {
            msg!("Instruction: Create and Mint pNFT with Merkle proof verification");
            instructions::instruction_32::process_instruction(program_id, accounts, &instruction_data[1..])
        }
        33 => {
            msg!("Instruction: Create and Mint pNFT with Token-2022 and Merkle proof verification");
            instructions::instruction_33::process_instruction(program_id, accounts, &instruction_data[1..])
        } 
        35 => {
            msg!("Instruction: Create Collection NFT with Token-2022");
            instructions::instruction_35::process_instruction(program_id, accounts, &instruction_data[1..])
        }

        
        36 => {
            msg!("Instruction: Create and Mint pNFT with Token-2022, Merkle proof verification and fixed collection");
            instructions::instruction_36::process_instruction(program_id, accounts, &instruction_data[1..])
        }
        37 => {
            msg!("Instruction: Create and Mint pNFT with Token-2022, Merkle proof verification and fixed collection without verification");
            instructions::instruction_37::process_instruction(program_id, accounts, &instruction_data[1..])
        }

        38 => {
            msg!("Instruction: Create and Mint pNFT with Token-2022 to program's ATA");
            instructions::instruction_38::process_instruction(program_id, accounts, &instruction_data[1..])
        }
        
        39 => {
            msg!("Instruction: Create and Mint pNFT to program's ATA");
            instructions::instruction_39::process_instruction(program_id, accounts, &instruction_data[1..])
        }
        */
        /*
        40 => {
            msg!("Instruction: Create and Mint pNFT with standard SPL Token, Merkle proof and fixed collection");
            instructions::instruction_40::process_instruction(program_id, accounts, &instruction_data[1..])
        }
        41 => {
            msg!("Instruction: Update pNFT metadata");
            instructions::instruction_41::process_instruction(program_id, accounts, &instruction_data[1..])
        }
            */
        /*
        42 => {
            msg!("Instruction: Withdraw SOL from program PDA to recipient");
            instructions::instruction_42::process_instruction(program_id, accounts, &instruction_data[1..])
        }
        43 => {
            msg!("Instruction: Universal update NFT metadata");
            instructions::instruction_43::process_instruction(program_id, accounts, &instruction_data[1..])
        }
        */
        43 => {
            msg!("Instruction: Universal update NFT metadata");
            instructions::instruction_43::process_instruction(program_id, accounts, &instruction_data[1..])
        },
        45 => instructions::instruction_45::process_instruction(program_id, accounts, &instruction_data[1..]),

        _ => {
            msg!("Error: Unknown instruction");
            Err(ProgramError::InvalidInstructionData)
        }
    }
}
