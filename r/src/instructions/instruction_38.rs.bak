// Создание NFT-коллекции с чеканкой на АТА программы

use solana_program::{
    account_info::{next_account_info, AccountInfo},
    entrypoint::ProgramResult,
    program::invoke,
    program::invoke_signed,
    program_error::ProgramError,
    pubkey::Pubkey,
    msg,
    system_instruction,
    sysvar::rent::Rent,
    sysvar::Sysvar,
};
use mpl_token_metadata::{
    instructions::{CreateV1, CreateV1InstructionArgs, MintV1, MintV1InstructionArgs},
    types::{TokenStandard, PrintSupply, Collection, CollectionDetails, Creator},
};
use spl_token_2022::ID as TOKEN_2022_PROGRAM_ID;

pub fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    _instruction_data: &[u8],
) -> ProgramResult {
    msg!("Starting create_collection_nft_with_token2022_to_program_ata...");
    
    let accounts_iter = &mut accounts.iter();
    
    // Получаем все необходимые аккаунты
    let metadata_account = next_account_info(accounts_iter)?;
    let master_edition_account = next_account_info(accounts_iter)?;
    let mint_account = next_account_info(accounts_iter)?;
    let program_authority = next_account_info(accounts_iter)?;
    let payer = next_account_info(accounts_iter)?;
    let system_program = next_account_info(accounts_iter)?;
    let sysvar_instructions = next_account_info(accounts_iter)?;
    let token_2022_program = next_account_info(accounts_iter)?;
    let token_account = next_account_info(accounts_iter)?;
    let token_record = next_account_info(accounts_iter)?;
    let spl_ata_program = next_account_info(accounts_iter)?;
    let token_metadata_program = next_account_info(accounts_iter)?;
    let rent_sysvar = next_account_info(accounts_iter)?;
    
    // Проверяем подписи
    if !mint_account.is_signer {
        msg!("Mint account must be a signer");
        return Err(ProgramError::MissingRequiredSignature);
    }
    if !payer.is_signer {
        msg!("Payer must be a signer");
        return Err(ProgramError::MissingRequiredSignature);
    }

    // Проверяем, что token_2022_program имеет правильный ID
    if token_2022_program.key != &TOKEN_2022_PROGRAM_ID {
        msg!("Invalid Token-2022 program ID provided");
        msg!("Expected: {}", TOKEN_2022_PROGRAM_ID);
        msg!("Received: {}", token_2022_program.key);
        return Err(ProgramError::InvalidArgument);
    }

    // Проверяем, что program_authority это правильный PDA
    let (expected_authority, bump_seed) = Pubkey::find_program_address(
        &[b"mint_authority"],
        program_id
    );
    if program_authority.key != &expected_authority {
        msg!("Invalid program authority provided");
        msg!("Expected: {}", expected_authority);
        msg!("Received: {}", program_authority.key);
        return Err(ProgramError::InvalidArgument);
    }

    // Создаем authority seeds для подписи
    let authority_signature_seeds = &[
        b"mint_authority".as_ref(),
        &[bump_seed],
    ];
    let signers = &[&authority_signature_seeds[..]];

    // Создаем минт аккаунт с использованием Token-2022
    msg!("Creating mint account with Token-2022...");
    let rent = Rent::get()?;
    let mint_len = 82; // Размер аккаунта Mint в байтах
    let lamports = rent.minimum_balance(mint_len);

    // Проверяем, что mint аккаунт еще не инициализирован
    if mint_account.data_len() > 0 {
        msg!("Mint account already initialized");
        return Err(ProgramError::AccountAlreadyInitialized);
    }

    // Создаем аккаунт для минта
    invoke(
        &system_instruction::create_account(
            payer.key,
            mint_account.key,
            lamports,
            mint_len as u64,
            &TOKEN_2022_PROGRAM_ID,
        ),
        &[
            payer.clone(),
            mint_account.clone(),
            system_program.clone(),
        ],
    )?;

    // Инициализируем минт с использованием Token-2022
    msg!("Initializing mint with Token-2022...");
    let init_mint_ix = spl_token_2022::instruction::initialize_mint2(
        &TOKEN_2022_PROGRAM_ID,
        mint_account.key,
        program_authority.key,
        Some(program_authority.key),
        0,
    )?;
    
    invoke(
        &init_mint_ix,
        &[
            mint_account.clone(),
            rent_sysvar.clone(),
        ],
    )?;

    // Создаем список создателей с program_id в качестве создателя с долей 100%
    let creators = vec![
        Creator {
            address: *program_id,
            verified: false,
            share: 100,
        },
    ];

    // Создаем метаданные и master edition для коллекции
    msg!("Creating metadata and master edition for collection...");
    let create_v1 = CreateV1 {
        metadata: *metadata_account.key,
        master_edition: Some(*master_edition_account.key),
        mint: (*mint_account.key, true),
        authority: *program_authority.key,
        payer: *payer.key,
        update_authority: (*program_authority.key, true),
        system_program: *system_program.key,
        sysvar_instructions: *sysvar_instructions.key,
        spl_token_program: Some(*token_2022_program.key), // Используем Token-2022
    };

    let create_args = CreateV1InstructionArgs {
        name: "Yapster Infinity".to_string(),
        symbol: "YAP8v1".to_string(),
        uri: "https://a.b/c.json".to_string(),
        seller_fee_basis_points: 1000,
        creators: Some(creators),
        primary_sale_happened: false,
        is_mutable: true,
        token_standard: TokenStandard::ProgrammableNonFungible,
        collection: None,
        uses: None,
        collection_details: Some(CollectionDetails::V1 { size: 0 }), // Устанавливаем флаг коллекции
        rule_set: None,
        decimals: Some(0),
        print_supply: Some(PrintSupply::Zero),
    };

    msg!("Invoking CreateV1 instruction...");
    invoke_signed(
        &create_v1.instruction(create_args),
        &[
            metadata_account.clone(),
            master_edition_account.clone(),
            mint_account.clone(),
            program_authority.clone(),
            payer.clone(),
            program_authority.clone(), // update_authority
            system_program.clone(),
            sysvar_instructions.clone(),
            token_2022_program.clone(),
        ],
        signers,
    )?;

    // Создаем ассоциированный токен аккаунт для программы с использованием Token-2022
    msg!("Creating associated token account for program with Token-2022...");
    invoke(
        &spl_associated_token_account::instruction::create_associated_token_account_idempotent(
            payer.key,
            program_authority.key, // Владелец токена - программа (PDA)
            mint_account.key,
            &TOKEN_2022_PROGRAM_ID,
        ),
        &[
            payer.clone(),
            token_account.clone(),
            program_authority.clone(), // Владелец токена - программа (PDA)
            mint_account.clone(),
            system_program.clone(),
            token_2022_program.clone(),
            spl_ata_program.clone(),
            rent_sysvar.clone(),
        ],
    )?;

    // Минтим токен с использованием Token-2022 на АТА программы
    msg!("Minting collection token to program's ATA with Token-2022...");
    let mint_v1 = MintV1 {
        token: *token_account.key,
        token_owner: Some(*program_authority.key), // Владелец токена - программа (PDA)
        metadata: *metadata_account.key,
        master_edition: Some(*master_edition_account.key),
        token_record: Some(*token_record.key),
        mint: *mint_account.key,
        authority: *program_authority.key,
        payer: *payer.key,
        system_program: *system_program.key,
        sysvar_instructions: *sysvar_instructions.key,
        spl_token_program: *token_2022_program.key, // Используем Token-2022
        spl_ata_program: *spl_ata_program.key,
        authorization_rules_program: None,
        authorization_rules: None,
        delegate_record: None,
    };

    let mint_args = MintV1InstructionArgs {
        amount: 1,
        authorization_data: None,
    };

    msg!("Invoking MintV1 instruction...");
    invoke_signed(
        &mint_v1.instruction(mint_args),
        &[
            token_account.clone(),
            program_authority.clone(), // Владелец токена - программа (PDA)
            metadata_account.clone(),
            master_edition_account.clone(),
            token_record.clone(),
            mint_account.clone(),
            program_authority.clone(),
            payer.clone(),
            system_program.clone(),
            sysvar_instructions.clone(),
            token_2022_program.clone(),
            spl_ata_program.clone(),
            token_metadata_program.clone(),
        ],
        signers,
    )?;

    msg!("Collection NFT created and minted successfully to program's ATA with Token-2022!");
    Ok(())
} 