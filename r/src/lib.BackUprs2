use solana_program::{
    account_info::AccountInfo,
    entrypoint,
    entrypoint::ProgramResult,
    program::invoke_signed,
    program_error::ProgramError,
    pubkey::Pubkey,
    msg,
};

use mpl_token_metadata::{
    instructions::{CreateV1, CreateV1InstructionArgs},
    types::{TokenStandard, PrintSupply},
};

entrypoint!(process_instruction);

pub fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    instruction_data: &[u8],
) -> ProgramResult {
    msg!("Processing instruction: {:?}", instruction_data);
    
    if instruction_data.is_empty() {
        return Err(ProgramError::InvalidInstructionData);
    }

    let instruction = instruction_data[0];
    match instruction {
        23 => {
            msg!("Creating clean NFT using CreateV1...");
            create_clean_nft(program_id, accounts)
        },
        _ => {
            msg!("Invalid instruction: {:?}", instruction_data);
            Err(ProgramError::InvalidInstructionData)
        }
    }
}

fn create_clean_nft(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
) -> ProgramResult {
    msg!("Starting create_clean_nft...");
    let account_info_iter = &mut accounts.iter();
    
    // Получаем все необходимые аккаунты
    let metadata_account = next_account_info(account_info_iter)?;
    let master_edition_account = next_account_info(account_info_iter)?;
    let mint_account = next_account_info(account_info_iter)?;
    let mint_authority = next_account_info(account_info_iter)?;
    let payer = next_account_info(account_info_iter)?;
    let update_authority = next_account_info(account_info_iter)?;
    let system_program = next_account_info(account_info_iter)?;
    let sysvar_instructions = next_account_info(account_info_iter)?;
    let spl_token_program = next_account_info(account_info_iter)?;
    let metadata_program = next_account_info(account_info_iter)?;

    // Проверяем подписи
    if !mint_account.is_signer {
        msg!("Mint account must be a signer");
        return Err(ProgramError::MissingRequiredSignature);
    }
    if !payer.is_signer {
        msg!("Payer must be a signer");
        return Err(ProgramError::MissingRequiredSignature);
    }

    // Проверяем, что program_authority это правильный PDA
    let (expected_authority, bump_seed) = Pubkey::find_program_address(
        &[b"mint_authority"],
        program_id
    );
    if mint_authority.key != &expected_authority {
        msg!("Invalid program authority provided");
        return Err(ProgramError::InvalidArgument);
    }

    // Создаем CreateV1 инструкцию
    let create_v1 = CreateV1 {
        metadata: *metadata_account.key,
        master_edition: Some(*master_edition_account.key),
        mint: (*mint_account.key, true),
        authority: *mint_authority.key,
        payer: *payer.key,
        update_authority: (*update_authority.key, true),
        system_program: *system_program.key,
        sysvar_instructions: *sysvar_instructions.key,
        spl_token_program: Some(*spl_token_program.key),
    };

    let args = CreateV1InstructionArgs {
        name: "NFT".to_string(),
        symbol: "NFT".to_string(),
        uri: "".to_string(),
        seller_fee_basis_points: 700,
        creators: None,
        primary_sale_happened: false,
        is_mutable: true,
        token_standard: TokenStandard::ProgrammableNonFungible,
        collection: None,
        uses: None,
        collection_details: None,
        rule_set: None,
        decimals: Some(0),
        print_supply: Some(PrintSupply::Zero),
    };

    // Создаем seeds для подписи
    let authority_signature_seeds = &[
        b"mint_authority".as_ref(),
        &[bump_seed],
    ];
    let signers = &[&authority_signature_seeds[..]];

    // Вызываем CreateV1 инструкцию
    invoke_signed(
        &create_v1.instruction(args),
        &[
            metadata_account.clone(),
            master_edition_account.clone(),
            mint_account.clone(),
            mint_authority.clone(),
            payer.clone(),
            update_authority.clone(),
            system_program.clone(),
            sysvar_instructions.clone(),
            spl_token_program.clone(),
            metadata_program.clone(),
        ],
        signers,
    )?;

    msg!("Clean NFT created successfully!");
    Ok(())
}

fn next_account_info<'a, 'b>(
    iter: &mut std::slice::Iter<'a, AccountInfo<'b>>,
) -> Result<&'a AccountInfo<'b>, ProgramError> {
    iter.next().ok_or(ProgramError::NotEnoughAccountKeys)
}

#[cfg(test)]
mod test {
    use super::*;

    #[test]
    fn test_initialize() {
        let program_id = Pubkey::default();
        let accounts = [];
        let instruction_data = [23];
        
        let result = process_instruction(&program_id, &accounts, &instruction_data);
        assert!(result.is_err()); // Должно вернуть ошибку, так как нет необходимых аккаунтов
    }
}
