/**
 * Скрипт для расчета бесконечной геометрической прогрессии с высокой точностью
 * Демонстрирует использование BigInt и библиотеки big.js для точных вычислений
 */

// Для установки библиотеки: npm install big.js @types/big.js
import Big from 'big.js';

/**
 * Функция для расчета суммы бесконечной геометрической прогрессии с использованием стандартных чисел
 * Формула для бесконечной прогрессии при |r| < 1: S = a / (1 - r)
 * 
 * @param a - первый член прогрессии
 * @param r - знаменатель прогрессии
 */
function geometricSum(a: number, r: number): number {
    // Для бесконечной прогрессии (когда |r| < 1)
    if (Math.abs(r) < 1) {
        return a / (1 - r);
    }
    
    throw new Error('Для бесконечной прогрессии |r| должно быть меньше 1');
}

/**
 * Функция для расчета суммы бесконечной геометрической прогрессии с использованием Big.js
 * Обеспечивает более высокую точность для очень больших чисел
 * 
 * @param a - первый член прогрессии
 * @param r - знаменатель прогрессии
 * @param precision - количество знаков после запятой (по умолчанию 100)
 */
function geometricSumBig(a: string | number, r: string | number, precision: number = 100): Big {
    // Устанавливаем точность
    Big.DP = precision;
    
    const aBig = new Big(a);
    const rBig = new Big(r);
    const one = new Big(1);
    
    // Проверка условия |r| < 1
    if (rBig.abs().lt(one)) {
        return aBig.div(one.minus(rBig));
    }
    
    throw new Error('Для бесконечной прогрессии |r| должно быть меньше 1');
}

/**
 * Функция для расчета суммы конечной геометрической прогрессии для большого количества членов
 * Формула: S = a * (1 - r^n) / (1 - r)
 * 
 * @param a - первый член прогрессии
 * @param r - знаменатель прогрессии
 * @param n - количество членов (может быть очень большим)
 */
function finiteSumBigInt(a: number, r: number, n: bigint): number {
    // Для очень больших n, если |r| < 1, сумма стремится к a/(1-r)
    if (Math.abs(r) < 1 && n > 1000000n) {
        return a / (1 - r);
    }
    
    // Для конечной прогрессии с разумным n
    // Используем обычную формулу, но с осторожностью из-за возможных проблем с точностью
    return a * (1 - Math.pow(r, Number(n))) / (1 - r);
}

// Параметры для проверки
const initialAmount = 56;           // Начальное значение
const x = 374/375;                  // Коэффициент (≈ 0.9973333333333333)

// Проверяем результат для бесконечной прогрессии с обычными числами
const infiniteSum = geometricSum(initialAmount, x);

console.log(`Расчет бесконечной геометрической прогрессии:`);
console.log(`----------------------------------------`);
console.log(`Параметры:`);
console.log(`- Начальное значение: ${initialAmount}`);
console.log(`- Коэффициент x: ${x.toFixed(16)} (дробь: 374/375)`);
console.log(`\nРезультат для бесконечной прогрессии (стандартные числа):`);
console.log(`Сумма бесконечной прогрессии: ${infiniteSum.toFixed(10)}`);

// Проверяем результат с использованием Big.js для высокой точности
try {
    const infiniteSumBig = geometricSumBig(initialAmount, x, 50);
    console.log(`\nРезультат с использованием Big.js (50 знаков после запятой):`);
    console.log(`Сумма бесконечной прогрессии: ${infiniteSumBig.toString()}`);
} catch (error) {
    console.log(`\nОшибка при вычислении с Big.js: ${error.message}`);
    console.log(`Примечание: Для работы этого примера установите библиотеку big.js: npm install big.js @types/big.js`);
}

// Демонстрация вычислений для очень больших периодов времени
console.log(`\nДемонстрация вычислений для очень больших периодов времени:`);

// Массив с разными периодами времени (в годах)
const timePeriodsYears = [
    1000n,                  // 1 тысяча лет
    1000000n,               // 1 миллион лет
    1000000000n,            // 1 миллиард лет
    1000000000000n,         // 1 триллион лет
    1000000000000000n,      // 1 квадриллион лет
    10n ** 100n             // Гуголь лет (10^100)
];

// Предположим, что один период (день) = 1 год для простоты
for (const years of timePeriodsYears) {
    try {
        // Для очень больших чисел используем приближение к бесконечной сумме
        const sum = finiteSumBigInt(initialAmount, x, years);
        const percentOfInfinite = (sum / infiniteSum) * 100;
        
        console.log(`За ${years.toString()} лет: ${sum.toFixed(10)} (${percentOfInfinite.toFixed(10)}% от бесконечной суммы)`);
    } catch (error) {
        console.log(`Ошибка при вычислении для ${years.toString()} лет: ${error.message}`);
    }
}

// Демонстрация точности представления дроби
console.log(`\nДемонстрация точности представления дроби 374/375:`);
console.log(`- Как число с плавающей точкой: ${x}`);
console.log(`- Как дробь: 374/375 = ${(374/375).toFixed(20)}`);
console.log(`- Разница между 374/375 и 0.9973333333333333: ${(374/375 - 0.9973333333333333).toFixed(20)}`);

// Объяснение математической сути
console.log(`\nМатематическое объяснение:`);
console.log(`Сумма бесконечной геометрической прогрессии S = a / (1 - r) при |r| < 1`);
console.log(`В нашем случае: S = ${initialAmount} / (1 - ${x.toFixed(16)}) = ${initialAmount} / ${(1-x).toFixed(16)} = ${infiniteSum.toFixed(10)}`);
console.log(`\nЭто означает, что сумма всех членов ряда ${initialAmount} + ${initialAmount}*${x.toFixed(4)} + ${initialAmount}*${x.toFixed(4)}^2 + ... стремится к ${infiniteSum.toFixed(10)}`);
console.log(`\nПри этом, чем ближе знаменатель r к 1, тем медленнее сходится ряд и тем больше будет сумма.`);
console.log(`Это позволяет моделировать процессы, происходящие на очень длительных временных интервалах.`); 